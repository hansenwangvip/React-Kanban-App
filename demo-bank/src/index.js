import React, {Component} from 'react';import {render} from 'react-dom';import {Container} from 'flux/utils';import BankBalanceStore from './BankBalanceStore-ReduceStore';import BankActions from './BankActions';import BankRewardsStore from './BankRewardsStore';class App extends Component {	constructor() {		super(...arguments);		BankActions.createAccount();	}	deposit() {		BankActions.depositIntoAccount(Number(this.refs.amount.value));		this.refs.amount.value = '';	}	withdraw() {		BankActions.withdrawFromAccount(Number(this.refs.amount.value));		this.refs.amount.value = '';	}	render() {		return (			<div>				<header>Flux Trust Bank</header>				<h1>Your balance is ${(this.state.balance).toFixed(2)}</h1>				<h2>Your Points Rewards Tier is {this.state.rewardsTier}</h2>				<div className="atm">					<input type="text"					       placeholder="Enter Amount"					       ref="amount" />					<br />					<button onClick={this.withdraw.bind(this)}><span>Withdraw</span></button>					<button onClick={this.deposit.bind(this)}><span>Deposit</span></button>				</div>			</div>		)	}}//高阶Container组件新增的方法//返回所有组件正在侦听的Store组成的数组。App.getStores = () => ([BankBalanceStore, BankRewardsStore]);//将Store中的state映射到组件私有state。App.calculateState = (prevState) => (	{		balance: BankBalanceStore.getState(),		rewardsTier: BankRewardsStore.getState()	});//高阶组件包装Appconst AppContainer = Container.create(App);render(<AppContainer />, document.getElementById('root'));