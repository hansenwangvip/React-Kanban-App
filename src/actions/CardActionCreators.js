import AppDispatcher from '../AppDispatcher';import constants from '../consts/consts';import KanbanAPI from '../api/KanbanApi';import CardStore from '../stores/CardStore'import {throttle} from "../components/节流函数";let CardActionCreators = {	fetchCards() {		AppDispatcher.dispatchAsync(			KanbanAPI.fetchCards(),			{				request: constants.FETCH_CARDS,				success: constants.FETCH_CARDS_SUCCESS,				failure: constants.FETCH_CARDS_ERROR			});	},	toggleCardDetails(cardId){		AppDispatcher.dispatch({			type:constants.TOGGLE_CARD_DETAILS,			payload:{cardId}		});	},	addCard(card) {		AppDispatcher.dispatchAsync(			KanbanAPI.addCard(card),			{				request: constants.FETCH_CARDS,				success: constants.FETCH_CARDS_SUCCESS,				failure: constants.FETCH_CARDS_ERROR			},			{card}		)	},	updateCard(card, draftCard) {		AppDispatcher.dispatchAsync(			KanbanAPI.updateCard(card, draftCard),			{				request: constants.FETCH_CARDS,				success: constants.FETCH_CARDS_SUCCESS,				failure: constants.FETCH_CARDS_ERROR			},			{card, draftCard}		)	},	updateCardStatus: throttle((cardId, listId) => {		AppDispatcher.dispatch({			type: constants.UPDATE_CARD_STATUS,			payload: {cardId, listId}		})	}),	updateCardPosition: throttle((cardId, afterId) => {		AppDispatcher.dispatch({			type: constants.UPDATE_CARD_POSITION,			payload: {cardId, afterId}		})	}, 500),	persistCardDrag(cardProps) {		let card = CardStore.getCard(cardProps.id);		let cardIndex = CardStore.getCardIndex(cardProps.id);		AppDispatcher.dispatchAsync(			KanbanAPI.persistCardDrag(card.id, card.status, cardIndex),			{				request: constants.PERSIST_CARD_DRAG,				success: constants.PERSIST_CARD_DRAG_SUCCESS,				failure: constants.PERSIST_CARD_DRAG_ERROR			},			{cardProps}		);	}};export default CardActionCreators;