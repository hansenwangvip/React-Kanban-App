import React, {Component, PropTypes} from 'react';import {render} from 'react-dom';class ContactsAppContainer extends Component {	constructor() {		super();		this.state = {			contacts: []		};	}	componentDidMount() {		fetch('./contacts.json')			.then((response) => (response.json()))			.then((responseData) => {				this.setState({contacts: responseData})			})			.catch((error) => {			console.log("Erroe fetching and parsing data!" , error);			});	}	render(){		return (			<ContactsApp contacts = {this.state.contacts} />		);	}}class ContactsApp extends Component {	constructor() {		super();		this.state = {			filterText: ''		}	};	handleUserInput(searchTerm) {		this.setState({filterText: searchTerm})	}	render() {		return (			<div>				<SearchBar filterText={this.state.filterText}				           onUserInput={this.handleUserInput.bind(this)} />				<ContactList contacts={this.props.contacts}				             filterText={this.state.filterText} />			</div>		)	}}ContactsApp.propTypes = {	contacts: PropTypes.arrayOf(PropTypes.object)}//接收2个props的单纯组件SearchBarclass SearchBar extends Component {	handleChange(event) {		this.props.onUserInput(event.target.value)	}	render() {		return <input type="search"		              placeholder="search"		              value={this.props.filterText}		              onChange={this.handleChange.bind(this)} />	}}SearchBar.propTypes = {	onUserInput: PropTypes.func.isRequired,	filterText: PropTypes.string.isRequired}//接收"contacts" 和 "fiterText"， 因为这两个属性相同时，输出相同结果，所以也是单纯组件。class ContactList extends Component {	render() {		let filteredContacts = this.props.contacts.filter(			(contact) => (contact.name.indexOf(this.props.filterText) !== -1)		);		return (			<ul>				{filteredContacts.map(					(contact) => <ContactItem key={contact.email}					                          name={contact.name}					                          email={contact.email} />				)}			</ul>		)	}}ContactList.propTypes = {	contacts: PropTypes.arrayOf(PropTypes.object)}//class ContactItem extends Component {	render() {		return <li>{this.props.name} - {this.props.email} </li>	}}ContactItem.propTypes = {	name: PropTypes.string.isRequired,	email: PropTypes.string.isRequired,}//原始API数据let contacts = [	{name: 'Cassio Zen', email: "cassiozen@gmial.com"},	{name: 'Dan Abramov', email: "gaearon@somewhere.com"},	{name: 'Pete Hunt', email: "floydophone@somewhere.com"},]render(	<ContactsAppContainer/>,	document.getElementById("root"));