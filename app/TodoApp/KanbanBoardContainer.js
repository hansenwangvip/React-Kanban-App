import React, {Component} from 'react';import KanbanBoard from './KanbanBoard';import 'whatwg-fetch';import 'babel-polyfill';import  update from "react-addons-update";const API_URL = './kanbanApi.json';const API_HEADERS = {	'Content-Type': 'application/json',	Authorization: ''};class KanbanBoardContainer extends Component {	constructor() {		super(...arguments);		this.state = {			cards: [],		};	}	componentDidMount() {		fetch(API_URL, {headers: API_HEADERS})			.then((response) => response.json())			.then((responseData) => {				this.setState({cards: responseData});			})			.catch((error) => {				console.log("Error fetching and parsing data", error);			});	}	//三个回调函数，addTask, deleteTask, toggleTask	addTask(cardId, taskName) {		//获取目标card的索引		let cardIndex = this.state.cards.findIndex((card) => (card.id === cardId));		//使用给出的name和一个临时的id,创建一个task		let newTask = {id: Date.now(), name: taskName, done: false};		//创建一个新对象，将新的 "newTask" Push进去		let nextState = update(this.state.cards, {			[cardIndex]: {				tasks: {$push: [newTask]}			}		});		//使用nextState对象，更新cards的state.		this.setState({cards: nextState});		//Call the API to add the task on the server		fetch('./kanbanApi.json/cards/${cardId}/tasks', {			method: 'post',			headers: API_HEADERS,			body: JSON.stringify(newTask)		})			.then((response) => response.json())			.then((responseData) => {				newTask.id = responseData.id;				this.setState({cards: nextState});			});		console.log("Added!")	}	deleteTask(cardId, taskId, taskIndex) {		let cardIndex = this.state.cards.findIndex((card) => (card.id === cardId));		let nextState = update(this.state.cards, {			[cardIndex]: {				tasks: {$splice: [[taskIndex, 1]]}			}		});		this.setState({cards: nextState});		fetch('$(API_URL/cards/$(cardId)/tasks/$(taskId)', {			method: 'delete',			headers: API_HEADERS		});		console.log("Deleted!")	}	toggleTask(cardId, taskId, taskIndex) {		//搜索对应的索引值		let cardIndex = this.state.cards.findIndex((card) => card.id === cardId);		let newDoneValue;		let nextState = update(this.state.cards, {			[cardIndex]: {				tasks: {					[taskIndex]: {						done: {							$apply: (done) => {								newDoneValue = !done;								return newDoneValue;							}						}					}				}			}		});		this.setState({cards: nextState});		fetch('${API_URL}/cards/${cardId}/tasks/${taskId}', {			method: 'put',			headers: API_HEADERS,			body: JSON.stringify({done: newDoneValue})		});		console.log("Toggled!")	}	render() {		return <KanbanBoard cards={this.state.cards}		                    taskCallbacks={{			                    toggle: this.toggleTask.bind(this),			                    delete: this.deleteTask.bind(this),			                    add: this.addTask.bind(this)		                    }}		/>	}}export default KanbanBoardContainer;